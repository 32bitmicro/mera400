computer {
	# real CPU and I/O emulation speed:
	# "false" - run as fast as possible (default)
	# "true" - try to emulate actual instructions, memory and I/O timings
	speed_real = false

	# Internal timer interrupt cycle (in miliseconds)
	# allowed values: 2-100 (default is 10)
	# Note: cycle lengths available for real hardware were:
	# 2, 4, 8, 10, 20, 40, 80 (10 was the default)
	timer_step = 10

	# Start timer at power on.
	# allowed values: "true" (default), "false"
	timer_start = true

	# Enable CPU modification (17-bit byte addressing, additional instructions,
	# additional software interrupt, int 5/11 swap, broader interrupt mask
	# for I/O interrupts)
	# allowed values: "true", "false" (default)
	cpu_mod = false

	# IN/OU operations can be either illegal or legal in user programs
	# allowed values: "true" (default), "false"
	cpu_user_io_illegal = true

	# AWP (hardware 48-bit floating point and 32-bit fixed point arithmetic) is optional
	# allowed values: "true" (default), "false"
	cpu_awp = true

	# Memory is organized into 16 physical modules. Each module can be
	# either elwro or mega. Elwro modules are 32kword big (8 pages),
	# mega modules are 64kword in size (16 pages).
	# Module 0 always has to be populated with elwro memory.
	# Elwro modules are populated starting from 0 up, mega modules
	# from 15 down. Module 0 may be overlapped by mega module

	# allowed values: 1-16 (default: 1)
	mem_elwro = 1

	# allowed values: 0-16 (default: 0)
	mem_mega = 0

	# Name of image file containing MEGA PROM memory (1 segment, 4kword max)
	# (default: none)
	#mem_mega_prom = mega_prom.img

	# Enable or disable boot from MEGA PROM memory.
	# Works only when mem_mega_prom is specified.
	# allowed values: "true, "false" (default)
	mem_mega_boot = false

	# MERA-400 cpu stops when operating system tries to access unconfigured
	# memory segment, but this can be changed to work as for user programs:
	# only interrupt is fired. This is required to bootstrap from MEGA
	# and "false" is enforced if mem_mega_boot = true.
	# allowed values: "true" (default), "false"
	cpu_stop_on_nomem = true

	# 4kword segments hardwired for OS memory block (taken from module 0)
	# allowed values: 1 or 2 (default: 2)
	mem_os_segments = 2
}

#channel 0 = mem {
#	unit 0 = mera9425: /home/amo/disk1.img, /home/amo/disk2.img
#}

#channel 1 = char {
#	unit 0 = term_cons
#	unit 1 = term_tcp: 23400
#	unit 2 = term_serial: /dev/ttyS0, 9600, 8, N, 1
#}
#
#channel 2 = plix {
#	unit 0 = winchester: /home/amo/winchester1.img
#	unit 1 = winchester: /home/amo/winchester2.img
#}

channel 1 = multix {
#	unit 0 = puncher
#	unit 1 = puncher
#	unit 2 = puncher
#	unit 3 = punchreader
#	unit 4 = terminal
#	unit 5 = terminal
#	unit 6 = terminal
#	unit 7 = terminal
#	unit 8 = terminal
#	unit 9 = terminal
#	unit 10 = terminal
#	unit 11 = terminal
#	unit 12 = terminal
#	unit 13 = terminal
#	unit 14 = terminal
#	unit 15 = terminal
#	unit 20 = floppy: floppy.e4i
#	unit 21 = floppy: floppy.e4i
#	unit 28 = winchester: winchester_amo.e4i
}

#channel 15 = char {
#	unit 4 = term_cons
#}

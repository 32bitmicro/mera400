# Note: values in the template are the default ones

computer {
	# Choose CPU and memory backend:
	# "false" - use emulated CPU and memory
	# "true" - use FPGA implementation of CPU and memory
	fpga = false

	# Control CPU emulation speed:
	# "false" - run as fast as possible
	# "true" - try to emulate real hardware CPU and memory speeds
        speed_real = false

	# If speed_real is set to "true", cpu_speed_factor controls how much
	# faster (>1.0) or slower (<1.0) emulated CPU runs compared to
	# the real hardware. Value is a floating point number.
        cpu_speed_factor = 1

	# Execute instructions for this much time (in us) before sleeping.
	# Use with caution. If "real" emulation speed is slower than
	# it should be, you may need to set granularity to a higher value.
	throttle_granularity = 10

	# Internal clock interrupt period (in miliseconds)
	# Allowed values: 2-100
	# Note: cycle lengths available in real hardware are:
	# 2, 4, 8, 10, 20, 40, 80
	clock_period = 10

	# Choose whether to start clock at power on.
	clock_start = true

	# MERA-400 cpu stops when operating system tries to access unconfigured
	# memory segment, but this can be changed to work as for user programs
	# (only interrupt is fired in such configuration)
	cpu_stop_on_nomem = true

	# 'IN' and 'OU' instructions can be either illegal or legal in user programs
	cpu_user_io_illegal = true

	# AWP (hardware 48-bit floating point and 32-bit fixed point arithmetic) is optional
	cpu_awp = true

	# Enable or disable CPU modifications found in MX-16 CPU:
	#  * 17-bit byte addressing,
	#  *  additional instructions,
	#  *  additional software interrupt,
	#  *  interrupts 5 and 11 swapped,
	#  *  broader interrupt mask for I/O interrupts
	cpu_mod = false

	# Memory is organized into 16 physical modules. Each module can be
	# either elwro or mega. Elwro modules are 32kword big (8 pages),
	# mega modules are 64kword in size (16 pages).
	# Module 0 always has to be populated with elwro memory.
	# Elwro modules are populated starting from 0 up, mega modules
	# from 15 down. Module 0 may be overlapped by mega module

	# allowed values: 1-16
	mem_elwro = 1

	# allowed values: 0-16
	mem_mega = 0

	# 4kword segments hardwired for OS memory block (taken from module 0)
	# allowed values: 1 or 2
	mem_os_segments = 2

	# Name of image file containing MEGA PROM memory.
	# File has to be 8KB in size (1 full segment, 4kwords).
	# Unset by default
	#mem_mega_prom = "mega_prom.img"

	# Enable or disable boot from MEGA PROM memory.
	# Works only when mem_mega_prom is specified.
	mem_mega_boot = false
}

sound {
	# Internal buzzer emulation.
	# For this to work, set speed_real to true
	# and 1.5 >= cpu_speed_factor >= 0.5
	# Note that for sound to work properly logging will most likely
	# have to be disabled.
	enabled = false

	# Sound driver to use: pulseaudio, alsa or file (raw PCM dump)
	driver = pulseaudio

	# For alsa, this is the output device to use.
	# For file output, it's the file name. Unused for pulseaudio.
	output = default

	# Samplerate.
	rate = 44100

	# Sound buffer size (in samples, powers of 2).
	buffer_len = 128

	# Sound output latency (in miliseconds).
	# Increase if sound is choppy.
	latency = 20

	# Software buzzer volume control (0-100)
	volume = 30

	# Enable or disable speaker frequency response modeling.
	# When enabled, EM400 sounds like the real hardware.
	# In fact, disabling it is considered a criminal offence.
	speaker_filter = true
}

fpga {
	# Device to use for communication with the FPGA backend.
	device = "/dev/ttyUSB1"

	# FPGA link speed (baud).
	speed = 1000000
}

log {
	# Enable or disable logging.
	enabled = false

	# Name of the log file
	file = "em400.log"

	# Select which components write logs for (separated by commas, no spaces allowed.
	#
	# "<component>,..."
	#
	# Available components are:
	#   em4h - emulator
	#   reg, mem, cpu, op, int - registers, memory, cpu cycle, instructions, interrupts
	#   io, mx, px, cchr, cmem - general I/O, MULTIX, PLIX, character and memory channel
	#   term, 9425, wnch, flop, pnch, pnrd, tape - terminal, mera 9425, winchester, floppy, tape puncher and reader, magnetic tape
	#   crk5 - CROOK-5
	#   em4h - emulator, general
	#   ectl - emulator, remote control
	#   fpga - emulation-fpga I/O bridge
	#   all - special "component" to enable or disable all components
	#
	# Note that logging cpu cycle information slows down the emulation considerably (>1000 times)
	components = "em4h"

	# Use line buffered or fully buffered log output.
	line_buffered = true
}

#channel 0 = mem {
#	unit 0 = mera9425: /home/amo/disk1.img, /home/amo/disk2.img
#}

#channel 1 = char {
#	unit 0 = term_cons
#	unit 1 = term_tcp: 23400
#	unit 2 = term_serial: /dev/ttyS0, 9600, 8, N, 1
#}
#

channel 1 = multix {
#	unit 0 = puncher
#	unit 1 = puncher
#	unit 2 = puncher
#	unit 3 = punchreader
#	unit 4 = terminal
#	unit 5 = terminal
#	unit 6 = terminal
#	unit 7 = terminal
#	unit 8 = terminal
#	unit 9 = terminal
#	unit 10 = terminal
#	unit 11 = terminal
#	unit 12 = terminal
#	unit 13 = terminal
#	unit 14 = terminal
#	unit 15 = terminal
#	unit 20 = floppy: floppy.e4i
#	unit 21 = floppy: floppy.e4i
#	unit 28 = winchester: winchester_amo.e4i
}

#channel 15 = char {
#	unit 4 = term_cons
#}
